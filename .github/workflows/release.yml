name: Release

on:
  push:
    branches: [main]

env:
  CI: 'true'
  NODE_VERSION: '20.x'

jobs:
  validate:
    name: üõ†Ô∏è Build
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
      - name: üèó Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'yarn'
      - name: üöõ Install dependencies
        run: yarn install --check-files
      - name: ‚úèÔ∏è Lint
        run: yarn lint
      - name: üõ†Ô∏è Build
        run: yarn build
      - name: üîé Test
        run: yarn test

  node:
    name: üöÄ Release Node
    needs: [validate]
    runs-on: ubuntu-latest
    outputs:
      released-version: ${{ steps.publish.outputs.released-version }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
      - name: ü§ñ Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions [Bot]"
      - name: üèó Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'yarn'
      - name: üöõ Install dependencies
        run: yarn install --check-files
      - name: üõ†Ô∏è Build
        run: yarn build
      - name: üöÄ Publish
        id: publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn release
          yarn pack --filename matterbridge-home-assistant.tgz
          echo "released-version=$(yq -r '.version' package.json)" >> "$GITHUB_OUTPUT"
      - name: ‚§¥Ô∏è Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: matterbridge-home-assistant.tgz

  docker:
    name: üöÄ Release Docker
    needs: [node]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
      - name: üèó Set up build cache
        id: cache
        uses: actions/cache@v4.0.2
        with:
          path: /tmp/.docker-cache
          key: docker-${{ github.sha }}
          restore-keys: |
            docker
      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0
      - name: üèó Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "version=${{ needs.node.outputs.released-version }}" >> "$GITHUB_OUTPUT"
          echo "latest-tag=latest" >> "$GITHUB_OUTPUT"
          echo "matterbridge-version=$(yq -r '.dependencies.matterbridge' package.json)" >> "$GITHUB_OUTPUT"
      - name: ‚§¥Ô∏è Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: docker
      - name: üöÄ Build
        uses: docker/build-push-action@v6.0.2
        with:
          push: true
          context: ./docker
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/${{github.repository}}:${{ steps.flags.outputs.version }}
            ghcr.io/${{github.repository}}:${{ steps.flags.outputs.latest-tag }}
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          tags: |
            ghcr.io/${{github.repository}}:${{ steps.flags.outputs.version }}
            ghcr.io/${{github.repository}}:${{ steps.flags.outputs.latest-tag }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: |
            MATTERBRIDGE_VERSION=${{ steps.flags.outputs.matterbridge-version }}
      - name: üöö Swap build cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
