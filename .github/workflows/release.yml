name: Release

on:
  push:
    branches:
      - dev
      - main

env:
  CI: 'true'
  NODE_VERSION: '18.x'

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
      - name: üèó Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
      - name: üöõ Install dependencies
        run: yarn install --check-files
      - name: ‚úèÔ∏è Lint
        run: yarn lint
      - name: üõ†Ô∏è Build
        run: yarn build
      - name: üîé Test
        run: yarn test

  node:
    name: üöÄ Release Node
    needs: [validate]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
      - name: ü§ñ Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions [Bot]"
      - name: üèó Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
          registry-url: 'https://registry.npmjs.org'
      - name: üöõ Install dependencies
        run: yarn install --check-files
      - name: üõ†Ô∏è Build
        run: yarn build
      - name: üöÄ Publish (Beta)
        if: github.ref == 'refs/heads/dev'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export NODE_AUTH_TOKEN=$NODE_AUTH_TOKEN
          yarn release --preRelease=beta
      - name: üöÄ Publish
        if: github.ref == 'refs/heads/main'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export NODE_AUTH_TOKEN=$NODE_AUTH_TOKEN
          yarn release
      - run: ls -la
      - name: ‚§¥Ô∏è Upload Artifact
        if: false
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: matterbridge-home-assistant.tgz

  docker:
    name: üöÄ Release Docker
    if: false
    needs: [node]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@v4
      - name: üèó Set up build cache
        id: cache
        uses: actions/cache@v4.0.2
        with:
          path: /tmp/.docker-cache
          key: docker-${{ github.sha }}
          restore-keys: |
            docker
      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0
      - name: üèó Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "version=$(yq -r '.version' package.json)" >> "$GITHUB_OUTPUT"
          echo "matterbridge-version=$(yq -r '.peerDependencies.matterbridge' package.json)" >> "$GITHUB_OUTPUT"
      - name: ‚§¥Ô∏è Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: docker
      - name: üöÄ Build
        uses: docker/build-push-action@v6.0.1
        with:
          push: false
          context: ./docker
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/${{github.repository}}:${{ steps.flags.outputs.version }}
            ghcr.io/${{github.repository}}:latest
          tags: |
            ghcr.io/${{github.repository}}:${{ steps.flags.outputs.version }}
            ghcr.io/${{github.repository}}:latest
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: |
            MATTERBRIDGE_VERSION=${{ steps.flags.outputs.matterbridge-version }}
      - name: üöö Swap build cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
